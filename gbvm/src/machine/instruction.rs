use super::Register;

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub enum Instruction {
    Jmpr { offset: Imm7bit },
    Jnzr { offset: Imm7bit },
    Jzr { offset: Imm7bit },
    Jmpa { r: Register, s: Register },
    Jnza { r: Register, s: Register },
    Jza { r: Register, s: Register },
    Cpy { r: Register, s: Register },
    Sto16 { offset: Imm7bit },
    Sto8 { offset: Imm7bit },
    St16 { r: Register, s: Register },
    St8 { r: Register, s: Register },
    Ld16a { value: u16 },
    Ld16b { value: u16 },
    Ld16c { value: u16 },
    // Value is encoded as a u8, we must sign-extend it to fit into a u16
    Ld8a { value: u16 },
    // Value is encoded as a u8, we must sign-extend it to fit into a u16
    Ld8b { value: u16 },
    // Value is encoded as a u8, we must sign-extend it to fit into a u16
    Ld8c { value: u16 },
    Ldo16 { offset: Imm7bit },
    Ldo8 { offset: Imm7bit },
    Ld16 { r: Register, s: Register },
    Ld8 { r: Register, s: Register },
    Add { r: Register, s: Register },
    Addf { r: Register, s: Register },
    Sub { r: Register, s: Register },
    Subf { r: Register, s: Register },
    Muls { r: Register, s: Register },
    Mulu { r: Register, s: Register },
    Mulf { r: Register, s: Register },
    Divs { r: Register, s: Register },
    Divu { r: Register, s: Register },
    Divf { r: Register, s: Register },
    Addi { r: Register, val: Imm4bit },
    Subi { r: Register, val: Imm4bit },
    Shl { r: Register, s: Register },
    Shr { r: Register, s: Register },
    Sha { r: Register, s: Register },
    Shli { r: Register, val: Imm4bit },
    Shri { r: Register, val: Imm4bit },
    Shai { r: Register, val: Imm4bit },
    Neg { r: Register, s: Register },
    And { r: Register, s: Register },
    Or { r: Register, s: Register },
    Xor { r: Register, s: Register },
    Ps16 { value: u16 },
    // Value is encoded as a u8, we must sign-extend it to fit into a u16
    Ps8 { value: u16 },
    Pop16,
    Pop8,
    Ceq { r: Register, s: Register },
    Clt { r: Register, s: Register },
    Cle { r: Register, s: Register },
    Signal0,
    Signal1,
    Signal2,
    Signal3,
    Signal4,
    Signal5,
    Signal6,
    Signal7,
    Signal8,
    Signal9,
    SignalA,
    SignalB,
    SignalC,
    SignalD,
    SignalE,
    SignalF,
}

#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct Imm7bit(pub i16);
#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
pub struct Imm4bit(pub i16);
