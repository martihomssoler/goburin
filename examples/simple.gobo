// everythin in goburin gets translated to the lowest common language, "low"
// which in and of itself, is very similar to C

// low level goburin
#low
evens_times_ten_imper : (numbers: ^[]int) -> int = (
  mut result := 0,
  mut i := 0,
  while i < n (
    if numbers.i == 69 ( return result ),
    if numbers.i % 2 == 0 ( result += numbers.i * 10 ),
    i += 1,
  ),
  // auto return for last expression
  result  // <- no comma on the last statement return the value of the expression
)

// functional way
evens_times_ten_func : (numbers: ^[]int) -> int = (
  // UFCS (https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p3021r0.pdf)
  numbers
    .filter(n -> n % 2 == 0)
    .map(n -> n * 10)
    .fold(0, (acc, n) -> acc + n) 
)

// rule30
rule_30 : () = (
  mut state : u64 = 1 << 31,
  for i in (0..32) (
    for j in (64..0) ( print char(state >> if j & 1 ('0') else ('.')) )
    println ""
    state = (state >> 1) ^ (state | state << 1)
  )
)

// fibonacci
fibonacci : (n: int) -> int = (
    match n (
      n if n < 1 -> 0,
      n if n == 1 -> 1,
      _ -> fibonacci(n - 1) + fibonacci(n - 2)
    )    
)
